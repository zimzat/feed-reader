/*! [dev] reader 2015-08-05 05:32:10 */
!function(angular) {
    "use strict";
    angular.module("Reader.CategoryList", [ "ngResource" ]);
}(window.angular), function(angular) {
    "use strict";
    angular.module("Reader.EntryList", [ "ngResource", "Reader.ListResult" ]);
}(window.angular), function(angular) {
    "use strict";
    angular.module("Reader.EntryView", [ "ngResource", "Reader.ListResult" ]);
}(window.angular), function(angular) {
    "use strict";
    angular.module("Reader.FeedList", [ "ngResource" ]);
}(window.angular), function(angular) {
    "use strict";
    angular.module("Reader.ImageScrollerView", [ "ngResource", "Reader.ListResult" ]);
}(window.angular), function(angular) {
    "use strict";
    angular.module("Reader.ListResult", []);
}(window.angular), function(angular) {
    "use strict";
    angular.module("Reader.Login", [ "ngResource" ]);
}(window.angular), function(angular) {
    "use strict";
    angular.module("Reader.Manage", [ "ngResource" ]);
}(window.angular), function(angular) {
    "use strict";
    angular.module("Reader", [ "Reader.Login", "Reader.Manage", "Reader.CategoryList", "Reader.FeedList", "Reader.EntryList", "Reader.EntryView", "Reader.ImageScrollerView", "ngRoute", "cfp.hotkeys" ]), 
    angular.module("Reader").run(function($resource, $window, hotkeys, config) {
        hotkeys.add({
            combo: "l",
            description: "Logout",
            callback: function() {
                $resource(config.apiUrl + "/authentication/logout").save(), delete localStorage.authToken, 
                $window.location.pathname = "/login";
            }
        });
    }).constant("env", "dev").constant("config", function() {
        return {
            apiUrl: "http://reader.dev/api"
        };
    }()).config(function($routeProvider, $locationProvider, $httpProvider, hotkeysProvider) {
        $routeProvider.when("/login", {
            templateUrl: "app/Login/Login.html",
            controller: "Reader.Login.Controller"
        }).when("/manage/feed", {
            templateUrl: "app/Manage/Feed.html",
            controller: "Reader.Manage.Feed.Controller"
        }).when("/", {
            templateUrl: "app/CategoryList/CategoryList.html",
            controller: "Reader.CategoryList.Controller"
        }).when("/category/:categoryId/feed", {
            templateUrl: "app/FeedList/FeedList.html",
            controller: "Reader.FeedList.Controller"
        }).when("/category/:categoryId/entry", {
            templateUrl: "app/EntryList/EntryList.html",
            controller: "Reader.EntryList.Controller"
        }).when("/category/:categoryId/entry/image-scroller", {
            templateUrl: "app/ImageScrollerView/ImageScrollerView.html",
            controller: "Reader.ImageScrollerView.Controller"
        }).when("/category/:categoryId/entry/random", {
            templateUrl: "app/EntryList/EntryList.html",
            controller: "Reader.EntryList.Controller"
        }).when("/feed/:feedId/entry", {
            templateUrl: "app/EntryList/EntryList.html",
            controller: "Reader.EntryList.Controller"
        }).when("/entry/:entryId", {
            templateUrl: "app/EntryView/EntryView.html",
            controller: "Reader.EntryView.Controller"
        }).otherwise({
            redirectTo: "/"
        }), $locationProvider.html5Mode(!0), $httpProvider.interceptors.push("AuthInterceptor"), 
        hotkeysProvider.useNgRoute = !1;
    });
}(window.angular), function(angular) {
    "use strict";
    angular.module("Reader.CategoryList").controller("Reader.CategoryList.Controller", function($scope, $resource, $location, $timeout, favicon, hotkeys, config) {
        var updatePromise, Category = $resource(config.apiUrl + "/category"), updateFunction = function() {
            Category.get({}, function(data) {
                $scope.summary = data, favicon.badge(data.recent), updatePromise = $timeout(updateFunction, 3e5, !1);
            });
        };
        updateFunction(), $scope.$on("$destroy", function() {
            $timeout.cancel(updatePromise);
        }), $scope.action = {
            logout: function() {
                $resource(config.apiUrl + "/authentication/logout").save(), delete localStorage.authToken, 
                $location.url("/login");
            }
        }, hotkeys.bindTo($scope).add({
            combo: "p",
            description: "Previous: Go back to main category listing",
            callback: function() {
                $location.url("/");
            }
        }).add({
            combo: "n",
            description: "Next: Go to first feed",
            callback: function() {
                $scope.summary.recent ? $location.url("/category/0/entry") : $location.url("/category/" + $scope.summary.categories[0].categoryId + "/feed");
            }
        });
    });
}(window.angular), function(angular) {
    "use strict";
    angular.module("Reader.EntryList").controller("Reader.EntryList.Controller", function($scope, $resource, $routeParams, $location, hotkeys, config, ListResult) {
        var Category;
        if ($routeParams.feedId) Category = $resource(config.apiUrl + "/feed/:feedId/entry", {
            feedId: $routeParams.feedId
        }), $scope.backButton = {
            url: "/category/" + $routeParams.categoryId + "/feed",
            title: ""
        }, $resource(config.apiUrl + "/feed/:feedId", {
            feedId: $routeParams.feedId
        }).get({}, function(data) {
            $scope.pageTitle = data.title;
        }), $resource(config.apiUrl + "/category/:categoryId", {
            categoryId: $routeParams.categoryId
        }).get({}, function(data) {
            $scope.backButton.title = data.title;
        }); else if ($routeParams.categoryId) {
            var suffix = $location.path().indexOf("random") >= 0 ? "/random" : "";
            Category = $resource(config.apiUrl + "/category/:categoryId/entry" + suffix, {
                categoryId: $routeParams.categoryId
            }), $scope.backButton = {
                url: "/",
                title: "Home"
            }, $resource(config.apiUrl + "/category/:categoryId", {
                categoryId: $routeParams.categoryId
            }).get({}, function(data) {
                $scope.pageTitle = data.title;
            });
        }
        $scope.entries = Category.query(), $scope.showFeed = !$routeParams.feedId, $scope.categoryId = $routeParams.categoryId, 
        $scope.feedId = $routeParams.feedId, $scope.action = {
            seek: function(index) {
                ListResult.seek(index);
            }
        }, ListResult.declare($scope.entries), hotkeys.bindTo($scope).add({
            combo: "p",
            description: "Previous: Go back to main category listing",
            callback: function() {
                $location.url($scope.backButton.url);
            }
        }).add({
            combo: "n",
            description: "Next: Go to first entry",
            callback: function() {
                ListResult.seek(0), $location.url("/entry/" + $scope.entries[0].entryId + "?categoryId=" + $routeParams.categoryId + "&feedId=" + ($routeParams.feedId || ""));
            }
        });
    });
}(window.angular), function(angular) {
    "use strict";
    angular.module("Reader.EntryView").controller("Reader.EntryView.Controller", function($scope, $resource, $routeParams, $location, $timeout, hotkeys, config, ListResult, FullscreenSlideshow) {
        var Entry = $resource(config.apiUrl + "/entry/:entryId", {
            entryId: $routeParams.entryId
        }, {
            read: {
                method: "POST",
                url: config.apiUrl + "/entry/:entryId/read"
            },
            mark: {
                method: "POST",
                url: config.apiUrl + "/entry/:entryId/marked"
            }
        });
        $scope.entry = Entry.get({}, function() {
            Entry.read({}, !0, function() {
                $scope.entry.isRead = 1;
            }), $resource(config.apiUrl + "/feed/:feedId", {
                feedId: $scope.entry.feedId
            }).get({}, function(data) {
                $scope.pageTitle = data.title;
            }), $timeout(function() {
                $scope.$emit("entryLoaded", $scope.entry);
            }), ListResult.isEnd() || Entry.get({
                entryId: ListResult.peek().entryId
            }, function(data) {
                window.jQuery(data.content).find("img").each(function() {
                    new Image().src = window.jQuery(this).attr("src");
                });
            });
        }), $routeParams.feedId ? ($scope.backButton = {
            url: "/feed/" + $routeParams.feedId + "/entry?categoryId=" + $routeParams.categoryId,
            title: ""
        }, $resource(config.apiUrl + "/feed/:feedId", {
            feedId: $routeParams.feedId
        }).get({}, function(data) {
            $scope.backButton.title = data.title;
        })) : $routeParams.categoryId && ($scope.backButton = {
            url: "/category/" + $routeParams.categoryId + "/entry",
            title: ""
        }, $resource(config.apiUrl + "/category/:categoryId", {
            categoryId: $routeParams.categoryId
        }).get({}, function(data) {
            $scope.backButton.title = data.title;
        })), $scope.action = {
            goPrevious: function() {
                ListResult.isBeginning() ? $location.url("/") : $location.url("/entry/" + ListResult.previous().entryId + "?categoryId=" + $routeParams.categoryId + "&feedId=" + ($routeParams.feedId || ""));
            },
            goNext: function() {
                ListResult.isEnd() ? $location.url("/") : $location.url("/entry/" + ListResult.next().entryId + "?categoryId=" + $routeParams.categoryId + "&feedId=" + ($routeParams.feedId || ""));
            },
            toggleMarked: function() {
                Entry.mark({}, !$scope.entry.isMarked, function() {
                    $scope.entry.isMarked = 1 * !$scope.entry.isMarked, $(window).trigger("resize.autoforward");
                });
            },
            toggleRead: function() {
                Entry.read({}, !$scope.entry.isRead, function() {
                    $scope.entry.isRead = 1 * !$scope.entry.isRead;
                });
            },
            showIntervalDelay: function() {
                FullscreenSlideshow.inputSlideDelay();
            },
            startFullscreenSlideshow: function() {
                FullscreenSlideshow.enableDisable(), FullscreenSlideshow.pausePlay();
            }
        }, FullscreenSlideshow.goNextEntry = function() {
            $scope.$apply($scope.action.goNext);
        }, FullscreenSlideshow.goPreviousEntry = function() {
            $scope.$apply($scope.action.goPrevious);
        }, hotkeys.bindTo($scope).add({
            combo: "p",
            description: "Previous: Go to previous entry or back to main page.",
            callback: function() {
                FullscreenSlideshow.isActive() && FullscreenSlideshow.hasPrevious() ? FullscreenSlideshow.goPrevious() : $scope.action.goPrevious();
            }
        }).add({
            combo: "n",
            description: "Next: Go to next entry, next image (in slideshow), or back to main page.",
            callback: function() {
                FullscreenSlideshow.isActive() && FullscreenSlideshow.hasNext() ? FullscreenSlideshow.goNext() : $scope.action.goNext();
            }
        }).add({
            combo: "N",
            description: "Next: Go to the next entry (always).",
            callback: function() {
                $scope.action.goNext();
            }
        }).add({
            combo: "m",
            description: "Move scroll to next image.",
            callback: function() {}
        }).add({
            combo: "f",
            description: "Toggle full screen slideshow of images.",
            callback: function() {
                FullscreenSlideshow.enableDisable();
            }
        }).add({
            combo: "d",
            description: "View/Edit slideshow interval.",
            callback: function() {
                FullscreenSlideshow.inputSlideDelay();
            }
        }).add({
            combo: "space",
            description: "Toggle automatic slideshow advancement.",
            callback: function() {
                FullscreenSlideshow.pausePlay();
            }
        }).add({
            combo: "s",
            description: "Toggle mark on current entry.",
            callback: function() {
                $scope.action.toggleMarked();
            }
        }).add({
            combo: "u",
            description: "Toggle unread on current entry.",
            callback: function() {
                $scope.action.toggleRead();
            }
        });
    }).filter("sanitize", function($sce) {
        return function(htmlCode) {
            return $sce.trustAsHtml(htmlCode);
        };
    });
}(window.angular), function(angular, $) {
    angular.module("Reader.EntryView").service("FullscreenSlideshow", function($rootScope, ListResult) {
        return fullScreenSlideshow($, $rootScope, ListResult);
    });
    var fullScreenSlideshow = function($, $rootScope, ListResult) {
        function createBackgroundCover() {
            return $('<div class="background-cover" style=" text-align: left; color: white; background-color: black; z-index: 9999; position: absolute; left: 0; right: 0; top: 0; bottom: 0; display: block; "></div>');
        }
        function resizeAndRotateImages() {
            window.scrollTo(0, 1);
            var $img, $window = $(window), winHeight = $window.height(), winWidth = $window.width(), $imgs = $("img");
            if ($imgs.length) {
                $imgs.hide(), $img = $($imgs.get(activeImg)), activeImg++;
                var imgWidth = $img.width(), imgHeight = $img.height();
                imgWidth / imgHeight > winWidth / winHeight ? ($img.width(winWidth), $img.height(imgHeight * (winWidth / imgWidth))) : ($img.height(winHeight), 
                $img.width(imgWidth * (winHeight / imgHeight))), $img.css({
                    "z-index": 1e4 + activeImg,
                    position: "absolute",
                    left: (winWidth - $img.width()) / 2 + "px",
                    top: (winHeight - $img.height()) / 2 + "px"
                }).show();
                var $cover = $(".background-cover");
                $cover.length || ($cover = createBackgroundCover()), $cover.prependTo($(document.body)), 
                $cover.text([ activeImg, "/", $imgs.length, ", ", ListResult.remaining() ].join("")), 
                entry.isMarked && $cover.append(" &lowast;");
            } else ;
        }
        function hasPrevious() {
            return activeImg > 1;
        }
        function prevImg() {
            hasPrevious() ? (activeImg -= 2, resizeAndRotateImages()) : operations.goPreviousEntry();
        }
        function hasNext() {
            return activeImg < $(".article-content img").length;
        }
        function nextImg() {
            hasNext() ? (resizeAndRotateImages(), resetTimer()) : operations.goNextEntry();
        }
        function enable() {
            activeMode = !0, activeImg = 0;
            var $cover = $(".background-cover");
            $cover.length || ($cover = createBackgroundCover()), $cover.prependTo($(document.body)), 
            $("img:first").on("load", function() {
                resizeAndRotateImages(), resetTimer();
            }), $(window).on("resize.autoforward", function() {
                activeImg--, resizeAndRotateImages();
            }), resizeAndRotateImages(), setDisplayMode("paused");
        }
        function setDisplayMode(mode) {
            switch (mode) {
              case "off":
                $("body, html").attr("style", "");
                break;

              case "paused":
                $("body, html").css({
                    "background-color": "#202020",
                    cursor: "none",
                    position: "absolute",
                    top: 0,
                    bottom: 0,
                    left: 0,
                    right: 0
                }), $(".background-cover").css({
                    "background-color": "#202020"
                });
                break;

              case "on":
                $("body, html").css({
                    "background-color": "black",
                    cursor: "none",
                    position: "absolute",
                    top: 0,
                    bottom: 0,
                    left: 0,
                    right: 0
                }), $(".background-cover").css("background-color", "black");
                break;

              default:
                alert("Invalid mode given: " + mode);
            }
        }
        function pausePlay() {
            activeMode && (isTimerRunning() ? (stopTimer(), setDisplayMode("paused")) : (startTimer(), 
            setDisplayMode("on")));
        }
        function stop() {
            activeMode = !1, stopTimer(), $(window).off(".autoforward"), $(".background-cover").remove(), 
            $("img").show().removeAttr("style"), window.document.mozCancelFullScreen && window.document.mozCancelFullScreen(), 
            setDisplayMode("off");
        }
        function isTimerRunning() {
            return !!readerPageIntervalTimer;
        }
        function startTimer() {
            stopTimer(), readerPageIntervalTimer = window.setInterval(nextImg, 1e3 * slideDelay);
        }
        function stopTimer() {
            readerPageIntervalTimer && (window.clearInterval(readerPageIntervalTimer), readerPageIntervalTimer = null);
        }
        function resetTimer() {
            readerPageIntervalTimer && (stopTimer(), startTimer());
        }
        function inputSlideDelay() {
            var newSlideDelay = prompt("Enter delay between slide change:", slideDelay);
            newSlideDelay > 0 && (slideDelay = newSlideDelay, resetTimer());
        }
        function enableDisable() {
            activeMode ? stop() : enable();
        }
        function isActive() {
            return activeMode;
        }
        var readerPageIntervalTimer, activeImg = 0, slideDelay = 8, activeMode = !1, entry = {};
        $rootScope.$on("$locationChangeSuccess", function(event, newLocation) {
            -1 === newLocation.indexOf("/entry/") && stop();
        }), $rootScope.$on("entryLoaded", function(event, newEntry) {
            entry = newEntry, activeImg = 0, isActive() && ($("img:first").on("load", function() {
                activeImg--, resizeAndRotateImages(), resetTimer();
            }), resizeAndRotateImages());
        });
        var operations = {
            isActive: isActive,
            enableDisable: enableDisable,
            pausePlay: pausePlay,
            inputSlideDelay: inputSlideDelay,
            hasNext: hasNext,
            hasPrevious: hasPrevious,
            goNext: nextImg,
            goPrevious: prevImg,
            goNextEntry: function() {},
            goPreviousEntry: function() {}
        };
        return operations;
    };
}(window.angular, window.jQuery), function(angular) {
    "use strict";
    angular.module("Reader.FeedList").controller("Reader.FeedList.Controller", function($scope, $resource, $routeParams, $location, hotkeys, config) {
        var Category = $resource(config.apiUrl + "/category/:categoryId/feed", {
            categoryId: $routeParams.categoryId
        });
        $scope.feeds = Category.query(), $scope.categoryId = $routeParams.categoryId, $scope.category = $resource(config.apiUrl + "/category/:categoryId", {
            categoryId: $routeParams.categoryId
        }).get(), hotkeys.bindTo($scope).add({
            combo: "p",
            description: "Previous: Go back to main category listing",
            callback: function() {
                $location.url("/");
            }
        }).add({
            combo: "n",
            description: "Next: Go to first feed",
            callback: function() {
                $location.url("/feed/" + $scope.feeds[0].feedId + "/entry?categoryId=" + $routeParams.categoryId);
            }
        });
    });
}(window.angular), function(angular) {
    "use strict";
    angular.module("Reader.ImageScrollerView").controller("Reader.ImageScrollerView.Controller", function($scope, $resource, $location, $routeParams, hotkeys, config) {
        var Category = $resource(config.apiUrl + "/category/:categoryId/entry", {
            categoryId: $routeParams.categoryId
        });
        $scope.entries = [], $scope.mayLoadMore = !0, function($) {
            $(window).on("mousewheel wheel", function(e) {
                document.getElementById("grid-layout").scrollLeft += Math.min(200, window.innerWidth / 6) * ((e.wheelDelta || -e.deltaY) > 0 ? -1 : 1);
            }), $scope.$on("$destroy", function() {
                $(window).off("mousewheel wheel");
            });
        }(angular.element);
        var hoverEntry = null, Entry = $resource(config.apiUrl + "/entry/:entryId", {}, {
            read: {
                method: "POST",
                url: config.apiUrl + "/entry/:entryId/read"
            },
            mark: {
                method: "POST",
                url: config.apiUrl + "/entry/:entryId/marked"
            }
        });
        $scope.action = {
            loadMore: function() {
                $scope.mayLoadMore && ($scope.mayLoadMore = !1, Category.query({}, function(data) {
                    function loadImages() {
                        if (data.length) {
                            var item = data.pop();
                            Entry.get({
                                entryId: item.entryId
                            }, function(entry) {
                                $scope.entries.push({
                                    entryId: entry.entryId,
                                    isMarked: entry.isMarked,
                                    images: function() {
                                        var imgs = [];
                                        return jQuery(entry.content).find("img").addBack("img").each(function() {
                                            imgs.push({
                                                src: jQuery(this).attr("src")
                                            });
                                        }), imgs;
                                    }()
                                }), data.length && loadImages();
                            });
                        }
                    }
                    data.length || ($scope.mayLoadMore = !0), loadImages();
                }));
            },
            markAllRead: function() {
                angular.forEach($scope.entries, function(entry) {
                    Entry.read({
                        entryId: entry.entryId
                    }, !0);
                }), $scope.entries = [];
            },
            markEntry: function(entry) {
                Entry.mark({
                    entryId: entry.entryId
                }, !entry.isMarked, function() {
                    entry.isMarked = 1 * !entry.isMarked;
                });
            },
            markHoverEntry: function() {
                hoverEntry && $scope.action.markEntry(hoverEntry);
            },
            setHoverEntry: function(entry) {
                hoverEntry = entry;
            },
            clearHoverEntry: function() {
                hoverEntry = null;
            }
        }, hotkeys.bindTo($scope).add({
            combo: "p",
            description: "Previous: Go back to main category listing",
            callback: function() {
                $location.url("/");
            }
        }).add({
            combo: "n",
            description: "Next: Load More (if available)",
            callback: function() {
                $scope.action.loadMore();
            }
        }).add({
            combo: "m",
            description: "Scroll to the next image",
            callback: function() {
                var $selected = $("#grid-layout"), scrollLeft = ($selected.find("img:last").offset(), 
                Math.floor($selected.scrollLeft()));
                $("img").each(function() {
                    var $this = $(this), offsetLeft = Math.floor($this.offset().left), v = offsetLeft - ($selected.width() - $this.width()) / 2;
                    return v > 1 ? ($("#grid-layout").scrollLeft(Math.floor(v) + scrollLeft), !1) : void 0;
                });
            }
        }).add({
            combo: ",",
            description: "Mark the entry currently under the mouse.",
            callback: function() {
                $scope.action.markHoverEntry();
            }
        }).add({
            combo: "R",
            description: "Mark all entries read",
            callback: function() {
                $scope.action.markAllRead(), $scope.mayLoadMore = !0;
            }
        }).add({
            combo: "home",
            description: "Scroll to the beginning",
            callback: function(event) {
                event.preventDefault(), document.getElementById("grid-layout").scrollLeft = 0;
            }
        }).add({
            combo: "end",
            description: "Scroll to the end",
            callback: function(event) {
                event.preventDefault(), document.getElementById("grid-layout").scrollLeft = document.getElementById("grid-layout").scrollWidth;
            }
        }).add({
            combo: "pageup",
            callback: function(event) {
                event.preventDefault(), document.getElementById("grid-layout").scrollLeft -= document.getElementById("grid-layout").clientWidth / 3 * 2;
            }
        }).add({
            combo: "pagedown",
            callback: function(event) {
                event.preventDefault(), document.getElementById("grid-layout").scrollLeft += document.getElementById("grid-layout").clientWidth / 3 * 2;
            }
        });
    });
}(window.angular), function(angular) {
    "use strict";
    angular.module("Reader.ListResult").service("ListResult", function() {
        var results = [], current = 0, operations = {
            declare: function(input) {
                results = input;
            },
            remaining: function() {
                return (results.length > 0 ? results.length - 1 : 0) - current;
            },
            seek: function(index) {
                index >= 0 && index < results.length && (current = index);
            },
            current: function() {
                return results.length > 0 ? results[current] : void 0;
            },
            peek: function() {
                return operations.isEnd() ? void 0 : results[current + 1];
            },
            next: function() {
                return operations.isEnd() ? void 0 : results[++current];
            },
            previous: function() {
                return operations.isBeginning() ? void 0 : results[--current];
            },
            isEnd: function() {
                return current >= results.length - 1;
            },
            isBeginning: function() {
                return 0 === current;
            }
        };
        return operations;
    });
}(window.angular), function(angular) {
    "use strict";
    angular.module("Reader.Login").controller("Reader.Login.Controller", function($scope, $location, $resource, hotkeys, favicon, config) {
        $scope.credentials = {
            username: "",
            password: ""
        }, favicon.badge(0), hotkeys.bindTo($scope).add({
            combo: "return",
            callback: function() {
                $scope.action.login($scope.credentials);
            },
            allowIn: [ "INPUT" ]
        }), $scope.action = {
            login: function(credentials) {
                "" !== credentials.username && "" !== credentials.password && $resource(config.apiUrl + "/authentication/login").save({}, credentials).$promise.then(function() {
                    $location.url("/");
                }, function() {
                    $scope.loginError = "Invalid credentials";
                });
            }
        };
    });
}(window.angular), function(angular) {
    "use strict";
    angular.module("Reader.Manage").controller("Reader.Manage.Feed.Controller", function($scope, $resource, $location, config) {
        $scope.feed = {
            frequency: 0,
            url: $location.search().url,
            title: "",
            isEnabled: 1,
            categoryId: 0
        }, $scope.categories = $resource(config.apiUrl + "/category/list").query(), $scope.$watch("feed.frequency", function() {
            console.log($scope.feed), $scope.feed.frequency > 1440 && ($scope.feed.frequency = 60 * ($scope.feed.frequency / 60 / 6).toFixed() * 6);
        }), $scope.feedFrequency = function() {
            var f = $scope.feed.frequency;
            return f && "0" !== f ? 60 > f ? f + "m" : 1440 > f ? f / 60 + "h" : f / 60 / 24 + "d" : "[30m]";
        }, $scope.action = {
            save: function() {
                $resource(config.apiUrl + "/feed").save({}, $scope.feed, function() {
                    $location.url("/manage");
                });
            }
        };
    });
}(window.angular), function(angular) {
    "use strict";
    angular.module("Reader").run(function($rootScope, $location) {
        $rootScope.$on("$locationChangeStart", function(event, newLocation) {
            -1 !== newLocation.indexOf("login") || localStorage.authToken || (event.preventDefault(), 
            $location.url("/login"));
        });
    }).service("AuthInterceptor", function($q, $location) {
        var service = this;
        service.request = function(config) {
            return localStorage.authToken && (config.headers.Authorization = "Token " + localStorage.authToken), 
            config;
        }, service.response = function(config) {
            return config.headers("Authorization") && (localStorage.authToken = config.headers("Authorization")), 
            config;
        }, service.responseError = function(response) {
            return 401 === response.status && -1 === response.config.url.indexOf("login") && (delete localStorage.authToken, 
            $location.url("/login")), $q.reject(response);
        };
    });
}(window.angular), function(angular, Favico) {
    "use strict";
    angular.module("Reader").service("favicon", function() {
        var favico = new Favico({
            animation: "none",
            type: "rectangle"
        });
        return {
            badge: function(num) {
                favico.badge(num);
            },
            reset: function() {
                favico.reset();
            }
        };
    });
}(window.angular, window.Favico);