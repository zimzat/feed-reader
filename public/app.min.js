/*! reader 2015-06-30 02:21:32 */
!function(angular) {
    "use strict";
    angular.module("Reader.CategoryList", [ "ngResource" ]);
}(window.angular), function(angular) {
    "use strict";
    angular.module("Reader.EntryList", [ "ngResource", "Reader.ListResult" ]);
}(window.angular), function(angular) {
    "use strict";
    angular.module("Reader.EntryView", [ "ngResource", "Reader.ListResult" ]);
}(window.angular), function(angular) {
    "use strict";
    angular.module("Reader.FeedList", [ "ngResource" ]);
}(window.angular), function(angular) {
    "use strict";
    angular.module("Reader.ImageScrollerView", [ "ngResource", "Reader.ListResult" ]);
}(window.angular), function(angular) {
    "use strict";
    angular.module("Reader.ListResult", []);
}(window.angular), function(angular) {
    "use strict";
    angular.module("Reader.Login", [ "ngResource" ]);
}(window.angular), function(angular) {
    "use strict";
    angular.module("Reader", [ "Reader.Login", "Reader.CategoryList", "Reader.FeedList", "Reader.EntryList", "Reader.EntryView", "Reader.ImageScrollerView", "ngRoute", "cfp.hotkeys" ]), 
    angular.module("Reader").run(function($location, hotkeys) {
        hotkeys.add({
            combo: "l",
            description: "Logout",
            callback: function() {
                $location.url("/");
            }
        });
    }).constant("config", {
        apiUrl: "http://reader.dev/api"
    }).config(function($routeProvider, $locationProvider, hotkeysProvider) {
        $routeProvider.when("/", {
            templateUrl: "app/Login/Login.html",
            controller: "Reader.Login.Controller"
        }).when("/category", {
            templateUrl: "app/CategoryList/CategoryList.html",
            controller: "Reader.CategoryList.Controller"
        }).when("/category/:categoryId/feed", {
            templateUrl: "app/FeedList/FeedList.html",
            controller: "Reader.FeedList.Controller"
        }).when("/category/:categoryId/entry", {
            templateUrl: "app/EntryList/EntryList.html",
            controller: "Reader.EntryList.Controller"
        }).when("/category/:categoryId/entry/image-scroller", {
            templateUrl: "app/ImageScrollerView/ImageScrollerView.html",
            controller: "Reader.ImageScrollerView.Controller"
        }).when("/category/:categoryId/entry/random", {
            templateUrl: "app/EntryList/EntryList.html",
            controller: "Reader.EntryList.Controller"
        }).when("/feed/:feedId/entry", {
            templateUrl: "app/EntryList/EntryList.html",
            controller: "Reader.EntryList.Controller"
        }).when("/entry/:entryId", {
            templateUrl: "app/EntryView/EntryView.html",
            controller: "Reader.EntryView.Controller"
        }).otherwise({
            redirectTo: "/"
        }), $locationProvider.html5Mode(!0), hotkeysProvider.useNgRoute = !1;
    });
}(window.angular), function(angular) {
    "use strict";
    angular.module("Reader.CategoryList").controller("Reader.CategoryList.Controller", function($scope, $resource, $location, hotkeys, config) {
        var Category = $resource(config.apiUrl + "/category");
        $scope.summary = Category.get(), $scope.action = {
            logout: function() {
                $location.url("/");
            }
        }, hotkeys.bindTo($scope).add({
            combo: "p",
            description: "Previous: Go back to main category listing",
            callback: function() {
                $location.url("/");
            }
        }).add({
            combo: "n",
            description: "Next: Go to first feed",
            callback: function() {
                $scope.summary.recent ? $location.url("/category/0/entry") : $location.url("/category/" + $scope.summary.categories[0].categoryId + "/feed");
            }
        });
    });
}(window.angular), function(angular) {
    "use strict";
    angular.module("Reader.EntryList").controller("Reader.EntryList.Controller", function($scope, $resource, $routeParams, $location, hotkeys, config, ListResult) {
        var Category;
        if ($routeParams.feedId) Category = $resource(config.apiUrl + "/feed/:feedId/entry", {
            feedId: $routeParams.feedId
        }), $scope.backButton = {
            url: "/category/" + $routeParams.categoryId + "/feed",
            title: ""
        }, $resource(config.apiUrl + "/feed/:feedId", {
            feedId: $routeParams.feedId
        }).get({}, function(data) {
            $scope.pageTitle = data.title;
        }), $resource(config.apiUrl + "/category/:categoryId", {
            categoryId: $routeParams.categoryId
        }).get({}, function(data) {
            $scope.backButton.title = data.title;
        }); else if ($routeParams.categoryId) {
            var suffix = $location.path().indexOf("random") >= 0 ? "/random" : "";
            Category = $resource(config.apiUrl + "/category/:categoryId/entry" + suffix, {
                categoryId: $routeParams.categoryId
            }), $scope.backButton = {
                url: "/",
                title: "Home"
            }, $resource(config.apiUrl + "/category/:categoryId", {
                categoryId: $routeParams.categoryId
            }).get({}, function(data) {
                $scope.pageTitle = data.title;
            });
        }
        $scope.entries = Category.query(), $scope.showFeed = !$routeParams.feedId, $scope.categoryId = $routeParams.categoryId, 
        $scope.feedId = $routeParams.feedId, $scope.action = {
            seek: function(index) {
                ListResult.seek(index);
            }
        }, ListResult.declare($scope.entries), hotkeys.bindTo($scope).add({
            combo: "p",
            description: "Previous: Go back to main category listing",
            callback: function() {
                $location.url($scope.backButton.url);
            }
        }).add({
            combo: "n",
            description: "Next: Go to first entry",
            callback: function() {
                ListResult.seek(0), $location.url("/entry/" + $scope.entries[0].entryId + "?categoryId=" + $routeParams.categoryId + "&feedId=" + ($routeParams.feedId || ""));
            }
        });
    });
}(window.angular), function(angular) {
    "use strict";
    angular.module("Reader.EntryView").controller("Reader.EntryView.Controller", function($scope, $resource, $routeParams, $location, hotkeys, config, ListResult) {
        var Entry = $resource(config.apiUrl + "/entry/:entryId", {
            entryId: $routeParams.entryId
        }, {
            read: {
                method: "POST",
                url: config.apiUrl + "/entry/:entryId/read"
            },
            mark: {
                method: "POST",
                url: config.apiUrl + "/entry/:entryId/marked"
            }
        });
        $scope.entry = Entry.get({}, function() {
            $scope.entry.isRead || $scope.action.toggleRead(), $resource(config.apiUrl + "/feed/:feedId", {
                feedId: $scope.entry.feedId
            }).get({}, function(data) {
                $scope.pageTitle = data.title;
            });
        }), $routeParams.feedId ? ($scope.backButton = {
            url: "/feed/" + $routeParams.feedId + "/entry?categoryId=" + $routeParams.categoryId,
            title: ""
        }, $resource(config.apiUrl + "/feed/:feedId", {
            feedId: $routeParams.feedId
        }).get({}, function(data) {
            $scope.backButton.title = data.title;
        })) : $routeParams.categoryId && ($scope.backButton = {
            url: "/category/" + $routeParams.categoryId + "/entry",
            title: ""
        }, $resource(config.apiUrl + "/category/:categoryId", {
            categoryId: $routeParams.categoryId
        }).get({}, function(data) {
            $scope.backButton.title = data.title;
        })), $scope.action = {
            goPrevious: function() {
                ListResult.isBeginning() ? $location.url("/") : $location.url("/entry/" + ListResult.previous().entryId + "?categoryId=" + $routeParams.categoryId + "&feedId=" + ($routeParams.feedId || ""));
            },
            goNext: function() {
                ListResult.isEnd() ? $location.url("/") : $location.url("/entry/" + ListResult.next().entryId + "?categoryId=" + $routeParams.categoryId + "&feedId=" + ($routeParams.feedId || ""));
            },
            toggleMarked: function() {
                Entry.mark({}, !$scope.entry.isMarked, function() {
                    $scope.entry.isMarked = 1 * !$scope.entry.isMarked;
                });
            },
            toggleRead: function() {
                Entry.read({}, !$scope.entry.isRead, function() {
                    $scope.entry.isRead = 1 * !$scope.entry.isRead;
                });
            }
        }, hotkeys.bindTo($scope).add({
            combo: "p",
            description: "Previous: Go to previous entry or back to main page.",
            callback: function() {
                $scope.action.goPrevious();
            }
        }).add({
            combo: "n",
            description: "Next: Go to next entry or back to main page.",
            callback: function() {
                $scope.action.goNext();
            }
        }).add({
            combo: "m",
            description: "Move scroll to next image.",
            callback: function() {}
        }).add({
            combo: "f",
            description: "Toggle full screen slideshow of images.",
            callback: function() {}
        }).add({
            combo: "d",
            description: "View/Edit slideshow interval.",
            callback: function() {}
        }).add({
            combo: "space",
            description: "Toggle automatic slideshow advancement.",
            callback: function() {}
        }).add({
            combo: "s",
            description: "Toggle mark on current entry.",
            callback: function() {
                $scope.action.toggleMarked();
            }
        }).add({
            combo: "r",
            description: "Toggle read on current entry.",
            callback: function() {
                $scope.action.toggleRead();
            }
        });
    }).filter("sanitize", function($sce) {
        return function(htmlCode) {
            return $sce.trustAsHtml(htmlCode);
        };
    });
}(window.angular), function(angular) {
    "use strict";
    angular.module("Reader.FeedList").controller("Reader.FeedList.Controller", function($scope, $resource, $routeParams, $location, hotkeys, config) {
        var Category = $resource(config.apiUrl + "/category/:categoryId/feed", {
            categoryId: $routeParams.categoryId
        });
        $scope.feeds = Category.query(), $scope.categoryId = $routeParams.categoryId, $scope.category = $resource(config.apiUrl + "/category/:categoryId", {
            categoryId: $routeParams.categoryId
        }).get(), hotkeys.bindTo($scope).add({
            combo: "p",
            description: "Previous: Go back to main category listing",
            callback: function() {
                $location.url("/");
            }
        }).add({
            combo: "n",
            description: "Next: Go to first feed",
            callback: function() {
                $location.url("/feed/" + $scope.feeds[0].feedId + "/entry?categoryId=" + $routeParams.categoryId);
            }
        });
    });
}(window.angular), function(angular) {
    "use strict";
    angular.module("Reader.ImageScrollerView").controller("Reader.ImageScrollerView.Controller", function($scope, $resource, $location, $routeParams, hotkeys, config) {
        var Category = $resource(config.apiUrl + "/category/:categoryId/entry", {
            categoryId: $routeParams.categoryId
        });
        $scope.entries = [], function($) {
            $(window).on("mousewheel wheel", function(e) {
                document.getElementById("grid-layout").scrollLeft += Math.min(200, window.innerWidth / 6) * ((e.wheelDelta || -e.deltaY) > 0 ? -1 : 1);
            }), $scope.$on("$destroy", function() {
                $(window).off("mousewheel wheel");
            });
        }(angular.element);
        var hoverEntry = null, Entry = $resource(config.apiUrl + "/entry/:entryId", {}, {
            read: {
                method: "POST",
                url: config.apiUrl + "/entry/:entryId/read"
            },
            mark: {
                method: "POST",
                url: config.apiUrl + "/entry/:entryId/marked"
            }
        });
        $scope.action = {
            markAllRead: function() {},
            markEntry: function(entry) {
                Entry.mark({
                    entryId: entry.entryId
                }, !entry.isMarked, function() {
                    entry.isMarked = 1 * !entry.isMarked;
                });
            },
            markHoverEntry: function() {
                hoverEntry && $scope.action.markEntry(hoverEntry);
            },
            setHoverEntry: function(entry) {
                console.log(entry.entryId), hoverEntry = entry;
            },
            clearHoverEntry: function() {
                hoverEntry = null;
            }
        }, hotkeys.bindTo($scope).add({
            combo: "p",
            description: "Previous: Go back to main category listing",
            callback: function() {
                $location.url("/");
            }
        }).add({
            combo: "n",
            description: "Next: Load More (if available)",
            callback: function() {
                Category.query({}, function(data) {
                    $scope.entries = $scope.entries.concat(data);
                });
            }
        }).add({
            combo: "m",
            description: "Scroll to the next image",
            callback: function() {}
        }).add({
            combo: ",",
            description: "Mark the entry currently under the mouse.",
            callback: function() {
                $scope.action.markHoverEntry();
            }
        }).add({
            combo: "R",
            description: "Mark all entries read",
            callback: function() {
                $scope.action.markAllRead();
            }
        }).add({
            combo: "home",
            description: "Scroll to the beginning",
            callback: function() {
                document.getElementById("grid-layout").scrollLeft = 0;
            }
        }).add({
            combo: "end",
            description: "Scroll to the end",
            callback: function() {
                document.getElementById("grid-layout").scrollLeft = document.getElementById("grid-layout").scrollWidth;
            }
        });
    });
}(window.angular), function(angular) {
    "use strict";
    angular.module("Reader.ListResult").service("ListResult", function() {
        var results = [], current = 0, operations = {
            declare: function(input) {
                results = input;
            },
            seek: function(index) {
                index >= 0 && index < results.length && (current = index);
            },
            current: function() {
                return results.length > 0 ? results[current] : void 0;
            },
            next: function() {
                return operations.isEnd() ? void 0 : results[++current];
            },
            previous: function() {
                return operations.isBeginning() ? void 0 : results[--current];
            },
            isEnd: function() {
                return current >= results.length;
            },
            isBeginning: function() {
                return 0 === current;
            }
        };
        return operations;
    });
}(window.angular), function(angular) {
    "use strict";
    angular.module("Reader.Login").controller("Reader.Login.Controller", function($scope, $location, $resource, hotkeys) {
        $location.url("/category");
    });
}(window.angular);